# -*- coding: utf-8 -*-
"""submission_klasifikasi_gambar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LbM8gZmNaHmu62aWPv8ToFEJkF7NLZuq
"""

!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir ~/.kaggle

!cp kaggle.json ~/.kaggle/

!chmod 600 ~/.kaggle/kaggle.json

!kaggle datasets download -d chetankv/dogs-cats-images

# unzip dataset
import os
import zipfile
local_zip = '/content/dogs-cats-images.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/content')
zip_ref.close()

os.listdir('/content/dataset/test_set/')
os.listdir('/content/dataset/training_set/')

# training
print('total gambar kucing train: ', len(os.listdir('/content/dataset/training_set/cats')))
print('total gambar anjing train: ', len(os.listdir('/content/dataset/training_set/dogs')))
# test
print('total gambar kucing validation: ', len(os.listdir('/content/dataset/test_set/cats')))
print('total gambar anjing validation: ', len(os.listdir('/content/dataset/test_set/dogs')))

from tensorflow.keras.preprocessing.image import ImageDataGenerator
 

train_dir = os.path.join('/content/dataset/training_set')
train_datagen = ImageDataGenerator(rescale=1./255,
    rotation_range=20,
    zoom_range=0.1,
    shear_range=0.1,
    fill_mode = 'nearest')

val_dir = os.path.join('/content/dataset/test_set')
val_datagen = ImageDataGenerator(rescale=1./255,
    rotation_range=20,
    zoom_range=0.2,
    shear_range=0.2,
    fill_mode = 'nearest')

train_generator = train_datagen.flow_from_directory(
    train_dir,
    target_size=(100, 100),
    class_mode='binary')
validation_generator = val_datagen.flow_from_directory(
    val_dir,
    target_size=(100, 100),
    class_mode='binary')

import tensorflow as tf
    model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(100, 100, 3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.1),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.3), 
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Dropout(0.6),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(), 
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid') 
    ])

model.compile(optimizer=tf.optimizers.Adam(),
                  loss='binary_crossentropy',
                  metrics = ['accuracy'])

class myCallback(tf.keras.callbacks.Callback):
      def on_epoch_end(self, epoch, logs={}):
        if(logs.get('accuracy')>0.85 and logs.get('val_accuracy')>0.85):
          print("\nAkurasi telah mencapai > 85%!")
          self.model.stop_training = True
    callbacks = myCallback()

history = model.fit(train_generator,
                                  validation_data=validation_generator,
                                  epochs=40, batch_size=2000,
                                  verbose=1, callbacks=[callbacks])

import matplotlib.pyplot as plt

plt.plot(history.history['loss'])
plt.title('Model Training Loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train'], loc='upper right')
plt.show()

plt.plot(history.history['accuracy'])
plt.title('Model Training Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('epoch')
plt.legend(['train'], loc='upper left')
plt.show()

plt.plot(history.history['val_loss'])
plt.title('Model Validation Loss')
plt.ylabel('Loss')
plt.xlabel('epoch')
plt.legend(['val'], loc='upper right')
plt.show()

plt.plot(history.history['val_accuracy'])
plt.title('Model Validaton Accuracy')
plt.ylabel('Accuracy')
plt.xlabel('epoch')
plt.legend(['val'], loc='upper left')
plt.show()

# mengubah model ke tflite
converter = tf.lite.TFLiteConverter.from_keras_model(model)
tflite_model = converter.convert()

with tf.io.gfile.GFile('model.tflite', 'wb') as f:
    f.write(tflite_model)